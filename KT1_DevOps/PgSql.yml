---
- hosts: all
  become: yes

  vars_files:
    - vars.yml

  pre_tasks:
    - name: "Ensure remote_tmp directory exists with correct permissions"
      file:
        path: "/var/lib/pgsql/.ansible/tmp"
        state: directory
        mode: "0700"
      delegate_to: localhost

    - name: "Install PostgreSQL and Python packages on RedHat/Rocky"
      package:
        name: "{{ item }}"
        state: present
      loop:
        - postgresql
        - postgresql-server
        - python3-psycopg2
      when: ansible_distribution in ['RedHat', 'Rocky']

    - name: "Install PostgreSQL and Python packages on Ubuntu"
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - postgresql
        - postgresql-contrib
        - python3-psycopg2
      when: ansible_distribution == 'Ubuntu'

  tasks:
    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL on RedHat/Rocky"
      command: "postgresql-setup initdb"
      when: not postgres_data.stat.exists
      become_user: postgres

    - name: "Start and enable PostgreSQL service"
      service:
        name: postgresql
        state: started
        enabled: yes
      when: ansible_distribution in ['RedHat', 'Rocky']

    - name: "Ensure PostgreSQL service is running on Ubuntu"
      service:
        name: postgresql
        state: started
        enabled: yes
      when: ansible_distribution == 'Ubuntu'

    - name: "Create app database on RedHat/Rocky"
      postgresql_db:
        name: "{{ db_name }}"
        state: present
      become_user: postgres
      when: ansible_distribution in ['RedHat', 'Rocky']

    - name: "Create app database on Ubuntu"
      postgresql_db:
        name: "{{ db_name }}"
        state: present
      become_user: postgres
      become_method: sudo
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

    - name: "Create PostgreSQL user on RedHat/Rocky"
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ postgres_password }}"
        encrypted: yes
        login_user: postgres
        login_password: "{{ postgres_password }}"
        role_attr_flags: CREATEDB,CREATEROLE
      become: yes
      become_user: postgres
      ignore_errors: yes
      register: postgres_user_result
      when: ansible_distribution in ['RedHat', 'Rocky','Debian','Ubuntu']

    - name: "Create PostgreSQL user on Ubuntu"
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ postgres_password }}"
        encrypted: yes
        login_user: postgres
        login_password: "{{ postgres_password }}"
        role_attr_flags: CREATEDB,CREATEROLE
      become: yes
      become_user: postgres
      become_method: sudo
      ignore_errors: yes
      register: postgres_user_result
      when: ansible_distribution == 'Ubuntu'or ansible_distribution == 'Debian'

    - name: "Adjust PostgreSQL authentication for local connections"
      lineinfile:
        path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        line: "local   all             postgres                                trust"
        insertafter: EOF
        create: yes
      notify: Reload PostgreSQL

    - name: "Reload PostgreSQL service"
      service:
        name: postgresql
        state: reloaded
      notify: Restart PostgreSQL

    - name: "Revert PostgreSQL authentication for local connections"
      lineinfile:
        path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
        line: "local   all             postgres                                md5"
        state: absent
      notify: Reload PostgreSQL
      when: postgres_user_result.changed

    - name: "Grant privileges to PostgreSQL user on RedHat/Rocky"
      postgresql_privs:
        db: "{{ db_name }}"
        privs: ALL
        objs: "*.*"
        state: present
        role: "{{ db_user }}"
      become: yes
      become_user: postgres
      ignore_errors: yes
      when: ansible_distribution in ['RedHat', 'Rocky']

    - name: "Grant privileges to PostgreSQL user on Ubuntu"
      postgresql_privs:
        db: "{{ db_name }}"
        privs: ALL
        objs: "*.*"
        state: present
        role: "{{ db_user }}"
      become: yes
      become_user: postgres
      become_method: sudo
      ignore_errors: yes
      when: ansible_distribution == 'Ubuntu'or ansible_distribution == 'Debian'

    - name: "Allow PostgreSQL port through firewall on Red Hat/Rocky Linux"
      firewalld:
        port: "{{ postgresql_port }}/tcp"
        state: enabled
        permanent: yes
        immediate: yes
      when: ansible_distribution in ['RedHat', 'Rocky']

    - name: "Allow PostgreSQL port through UFW on Ubuntu"
      ufw:
        rule: allow
        port: "{{ postgresql_port }}"
        proto: tcp
      when: ansible_distribution == 'Ubuntu'or ansible_distribution == 'Debian'

  handlers:
    - name: "Reload PostgreSQL"
      service:
        name: postgresql
        state: reloaded

    - name: "Restart PostgreSQL"
      service:
        name: postgresql
        state: restarted
